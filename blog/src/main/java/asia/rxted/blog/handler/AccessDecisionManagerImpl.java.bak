package asia.rxted.blog.handler;

import java.util.List;
import java.util.function.Supplier;

import org.springframework.security.authorization.AuthorizationDecision;
import org.springframework.security.authorization.AuthorizationManager;
import org.springframework.security.core.Authentication;
import org.springframework.security.web.access.intercept.RequestAuthorizationContext;
import org.springframework.stereotype.Component;

import com.baomidou.mybatisplus.core.toolkit.CollectionUtils;

import asia.rxted.blog.model.dto.UserDetailsDTO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Component
public class AccessDecisionManagerImpl implements AuthorizationManager<RequestAuthorizationContext> {

    @Override
    public AuthorizationDecision check(Supplier<Authentication> authentication,
            RequestAuthorizationContext requestAuthorizationContext) {

        System.out.println(authentication.get().getAuthorities());

        String requestURI = requestAuthorizationContext.getRequest().getRequestURI();
        // UserDetailsService 调用mysql来检查授权

        log.info("===========check===========");
        Authentication auth = authentication.get();

        Object principal = auth.getPrincipal();
        if (!(principal instanceof UserDetailsDTO)) {
            log.error("Principal is not of type UserDetailsDTO. Found: {}", principal.getClass().getName());
            return new AuthorizationDecision(false);
        }
        UserDetailsDTO userDetailsDTO = (UserDetailsDTO) principal;

        List<String> roles = userDetailsDTO.getRoles();
        boolean pass = false;
        if (!CollectionUtils.isEmpty(roles)) {
            if (roles.stream().filter(r -> r.equals("admin")).findFirst().isPresent()) {
                pass = true;
            }
        }
        log.info("============pass==========={}", pass);

        return new AuthorizationDecision(true);

    }

}
